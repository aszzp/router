
class environment()：

    def __init__(self):
        make_cordinate()
        make_traffic()
        self.stae = [] # 初始化state

        pass

    def step(sefl, action):
        """
        输入动作，返回R值
        action：即某卫星和某卫星建立连接
        """
        update_cordinate(self) # 更新所有卫星坐标
        update_traffic(self) # 更新所有卫星流量需求
        apply_action(self,action) # 根据action调整链路


        reward = get_reward(self)  # 根据各源目节点对间流量需求计算R值




        return self.state, reward, 0


"""
算法：DQN
输入S，输出A
S是整个环境的状态，A是每一个动作的Q值。
假设现在共有两个轨道，每个轨道三颗卫星，每颗卫星有四条双工的星间链路，两条固定与同轨道的前后两颗卫星相连，
两条待算法分配动态建立，考虑到天线对齐等因素，动态链路建立有时间间隔约束，间隔可以假设从0到10分钟不等，后期
也可考虑在损失函数中增加建链的成本。
初始时刻，每颗卫星的状态可以如此表述：
[0-1,   x,y,z,   0-0, 0-2, -1, -1,    0, -1,0.1,0.5,0.9,0]
那么初始的S0:
[

]

考虑三个问题
1. [0-1,   x,y,z,   0-0, cd_time,0-2,cd_time  -1,cd_time -1,cd_time    0, -1,0.1,0.5,0.9,0] 作为输入可行吗？
2. 将整个轨道和流量矩阵作为输入？
3. 搞清楚env.step执行时，仿真中的时间流逝
4. 每颗卫星有必要维持两条固定的星间链路吗？要不都设定为动态链路？



首先1中的模式可不可行？
可行，状态（输入）这么设置是可行的。卫星的动态链路规划问题和迷宫问题如出一辙。链路建立具有时间约束，每个动作周期
系统执行了某个建链决策都相当于迷宫里走向一个新的位置：执行某个建链决策后部分链路就处于cd中，只有其余链路可以建立，
而迷宫类似，走到一个新的位置后，部分位置可以到达，部分位置不可达。如果某个建链决策不合理，那么该决策后的一定时间
内的链路损失（R值）将会通过Q= R+Gamma*Rnext反馈到该决策对应的Q值上，甚至可能为负值，这将使系统获得一定的前瞻性。

"""